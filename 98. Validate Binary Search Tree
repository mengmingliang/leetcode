/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<pair<int,bool>> father;
    
    bool checkBSTNode(TreeNode *root){
        for(int i = 0;i<father.size();i++){
            if(father[i].second){//right node
                if(root->val<=father[i].first){
                    return false;
                }
            }else{
                if(root->val>=father[i].first){//left node
                    return false;
                }
            }
        }
        
        return true;
    }
    
    bool isValidBST(TreeNode* root) {
        bool rt_val1 = true;
        bool rt_val2 = true;
        
        if(root == NULL){
            return true;
        }
        
        if(!checkBSTNode(root)){
            printf("check node %d is false!\n\r",root->val);
            return false;
        }
        
        if(root->left){
            if(root->val<=root->left->val){
                return false;
            }
            printf("check left %d is true!\n\r",root->left->val);
            father.push_back(make_pair(root->val,false));
            rt_val1 = isValidBST(root->left);
            father.pop_back();
        }
        
        if(root->right){
            if(root->val>=root->right->val){
                return false;
            }
            printf("check right %d is true!\n\r",root->right->val);
            father.push_back(make_pair(root->val,true));
            rt_val2 = isValidBST(root->right);
            father.pop_back();
        }
        
        printf("check left & right is %d %d!\n\r",rt_val1,rt_val2);
        if(rt_val1&&rt_val2){
            return true;
        }else{
            return false;
        }
    }
    
};
